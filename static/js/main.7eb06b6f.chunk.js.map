{"version":3,"sources":["components/TodoList/TodoList.jsx","components/api/api.js","components/CurrentUser/CurrentUser.jsx","App.js","index.js"],"names":["TodoList","state","this","props","todos","selectUser","handleSelect","handleInputChange","changeStatus","filterByChoise","className","type","placeholder","onChange","event","target","value","map","todo","completed","key","id","checked","onClick","readOnly","title","userId","React","Component","BASE_URL","getUser","fetch","then","response","json","CurrentUser","currentId","user","users","setState","data","clearUser","name","email","phone","website","createdAt","App","selectedUserId","filterByInput","input","result","filter","filteredByTitle","preparedTodos","includes","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7eb06b6f.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {}\n\n  render() {\n    // const { } = this.state;\n    const {\n      todos,\n      selectUser,\n      handleSelect,\n      handleInputChange,\n      changeStatus,\n      filterByChoise,\n    } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__container\">\n          <input\n            type=\"text\"\n            placeholder=\"Filter by word\"\n            className=\"TodoList__input\"\n            onChange={event => handleInputChange(event.target.value)}\n          />\n\n          <select\n            className=\"TodoList__select\"\n            value={filterByChoise}\n            onChange={handleSelect}\n          >\n            <option value=\"\">Choose filter</option>\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => (\n              <li\n                className={todo.completed\n                  ? 'TodoList__item TodoList__item--checked'\n                  : 'TodoList__item TodoList__item--unchecked'\n                }\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onClick={() => changeStatus(todo.id)}\n                    readOnly\n                  />\n                  {todo.title}\n                </label>\n\n                <button\n                  className=\"TodoList__button\"\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  handleSelect: PropTypes.func.isRequired,\n  handleInputChange: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  filterByChoise: PropTypes.string.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport function getUser(userId) {\n  return fetch(`${BASE_URL}/users/${userId}/`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    currentId: 0,\n    user: {},\n  };\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((users) => {\n        this.setState({\n          currentId: this.props.userId,\n          user: users.data,\n        });\n      });\n  }\n\n  componentDidUpdate() {\n    if (this.props.userId === this.state.currentId) {\n      return;\n    }\n\n    getUser(this.props.userId)\n      .then((users) => {\n        this.setState({\n          currentId: this.props.userId,\n          user: users.data,\n        });\n      });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { userId, clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__heading\">\n          {`Selected user: ${userId}`}\n        </h2>\n\n        <ul className=\"CurrentUser__list\">\n          <li className=\"CurrentUser__name\">\n            {user.name}\n          </li>\n          <li className=\"CurrentUser__email\">\n            {user.email}\n          </li>\n          <li className=\"CurrentUser__phone\">\n            {user.phone}\n          </li>\n          <li className=\"CurrentUser__website\">\n            {user.website}\n          </li>\n          <li className=\"CurrentUser__createdAt\">\n            {user.createdAt}\n          </li>\n        </ul>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear-user\"\n          onClick={() => clearUser()}\n        >\n          Clear user\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    filterByChoise: 'Choose filter',\n    filterByInput: '',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos: todos.filter(todo => todo.title && todo.id && todo.userId),\n        });\n      });\n  }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if ()\n  // }\n\n  handleSelect = (event) => {\n    this.setState({\n      filterByChoise: event.target.value,\n    });\n  }\n\n  handleInputChange = (input) => {\n    this.setState({\n      filterByInput: input,\n    });\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  selectUser = id => this.setState({ selectedUserId: id });\n\n  changeStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === +id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return { ...todo };\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, filterByChoise, filterByInput, selectedUserId } = this.state;\n\n    let filteredByTitle;\n\n    if (filterByInput) {\n      filteredByTitle = todos.filter(todo => todo.title\n        && todo.title.includes(filterByInput));\n    } else {\n      filteredByTitle = todos;\n    }\n\n    let preparedTodos;\n\n    switch (filterByChoise) {\n      case 'completed':\n        preparedTodos = filteredByTitle\n          .filter(todo => todo.completed);\n        break;\n\n      case 'active':\n        preparedTodos = filteredByTitle\n          .filter(todo => !todo.completed);\n        break;\n\n      default:\n        preparedTodos = filteredByTitle;\n        break;\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {this.state.todos.length}\n          <TodoList\n            todos={preparedTodos}\n            selectUser={this.selectUser}\n            handleSelect={this.handleSelect}\n            handleInputChange={this.handleInputChange}\n            changeStatus={this.changeStatus}\n            filterByChoise={filterByChoise}\n            filterByInput={filterByInput}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={this.clearUser}\n            />\n          ) : (\n            'No user selected'\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}